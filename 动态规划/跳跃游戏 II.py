# 给你一个非负整数数组 nums ，你最初位于数组的第一个位置。
#
# 数组中的每个元素代表你在该位置可以跳跃的最大长度。
#
# 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
#
# 假设你总是可以到达数组的最后一个位置。
#
#  
#
# 示例 1:
#
# 输入: nums = [2,3,1,1,4]
# 输出: 2
# 解释: 跳到最后一个位置的最小跳跃数是 2。
#      从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
# 示例 2:
#
# 输入: nums = [2,3,0,1,4]
# 输出: 2
#
# 来源：力扣（LeetCode）
# 链接：https://leetcode-cn.com/problems/jump-game-ii
# 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution:
    def jump(self, nums):
        n = len(nums)
        dp = [0] * n
        dp[0] = nums[0]

        count = 1
        for i in range(1, n):
            dp[i] = max(i + nums[i], dp[i - 1])

            if dp[i] >= n - 1:
                count += 1
                break
            if dp[i] > dp[i - 1]:
                count += 1
        print(dp,count,n-1)
        return count


s = Solution()
s.jump(
    [7, 0, 9, 6, 9, 6, 1, 7, 9, 0, 1, 2, 9, 0, 3]
#   [7, 0,11, 10, 13,
    )

# [0,1,2,3,4]
# [2,3,0,1,4]
# [0,2,2, ]

# [0,1,2,3,4]
# [1,1,1,1,1]
# [1,2,3,4,0]

# [0, 1, 2, 3, 4, 5, 6, 7,  8, 9,10,11,12,13]
# [7, 0, 9, 6, 9, 6, 1, 7 , 9, 0, 1, 2, 9, 0, 3]
# [2, 2,







# [7, 7, 11,11,13,13,13,14, 0, 0, 0, 0, 0, 0, 0]
