# 给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。
#
# 解集
# 不能
# 包含重复的子集。你可以按
# 任意顺序
# 返回解集。
# https://leetcode-cn.com/problems/subsets/
# 输入：nums = [1, 2, 3]
# 输出：[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]


# 位运算方法
# 哪一位出现了，就将哪一位放在上面。
# 例如 ： [1,2,3] = [111] ; [1,2] = [110] , [2] = [010]

# 000 0
# 001 1
# 010 2
# 011 0,1
# 100 2
# 101 0,2
# 111 0,1,2
class Solution:
    def subsets(self, nums):
        n = len(nums)
        res = []
        # 2 的 n 次方,例如[1,2,3],当一共有3个数需要排列，就是8.
        for i in range(1 << n):
            temp = []
            # 循环遍历3个数，其实这里我们判断序列哪几个下标是1就可以了，因为0/1 序列的下标和nums的下标是一一对应的
            #
            # 例如 5 二进制 101 ， 依次右移 0位，1位，2位，每次右移完 与 1 做 & 运算，就可以得到二进制中是1的位置。
            for j in range(n):
                if (i >> j) & 1 == 1:
                    temp.append(nums[j])
            print(temp)
            res.append(temp)
        return res

s = Solution()
s.subsets([3, 4, 5])
